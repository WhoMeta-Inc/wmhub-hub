apiVersion: v1
kind: Namespace
metadata:
  name: prod
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: azure-managed-disk
provisioner: kubernetes.io/azure-disk
parameters:
  skuName: Standard_LRS # oder Premium_LRS je nach Bedarf
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: whometa-hub-postgres-pvc
  namespace: prod
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: azure-managed-disk
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: whometa-hub-openplatform-pvc
  namespace: prod
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: azure-managed-disk
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: whometa-hub-postgres
  namespace: prod
spec:
  selector:
    matchLabels:
      app: whometa-hub-postgres
  replicas: 1
  template:
    metadata:
      labels:
        app: whometa-hub-postgres
    spec:
      serviceAccountName: wm-serviceaccount  # Fügen Sie dies hinzu
      containers:
        - name: postgres
          image: postgres:16
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: "total"
            - name: POSTGRES_PASSWORD
              value: "platform"
            - name: POSTGRES_DB
              value: "openplatform"
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          volumeMounts:
            - mountPath: /var/lib/postgresql/data/pgdata
              name: postgres-storage
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: whometa-hub-postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: whometa-hub-postgres
  namespace: prod
spec:
  ports:
    - port: 5432
  selector:
    app: whometa-hub-postgres
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: whometa-hub
  namespace: prod
spec:
  selector:
    matchLabels:
      app: whometa-hub
  replicas: 1
  template:
    metadata:
      labels:
        app: whometa-hub
    spec:
      serviceAccountName: wm-serviceaccount  # Fügen Sie dies hinzu
      containers:
        - name: openplatform
          image: wmacs.azurecr.io/whometa/whometa-hub:latest # Passen Sie das Docker-Image an
          ports:
            - containerPort: 8000
          env:
            - name: DATABASE
              value: "postgresql://total:platform@whometa-hub-postgres:5432/openplatform"
          volumeMounts:
            - mountPath: /var/lib/postgresql/data/pgdata
              name: openplatform-storage
      volumes:
        - name: openplatform-storage
          persistentVolumeClaim:
            claimName: whometa-hub-openplatform-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: whometa-hub
  namespace: prod
spec:
  ports:
    - port: 8000
  selector:
    app: whometa-hub
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: whometa-hub-ingress
  namespace: prod
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: letsencrypt-azure
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - hub.whometa.eu
      secretName: whometa-hub-tls
  rules:
    - host: hub.whometa.eu
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: whometa-hub
                port:
                  number: 8000
